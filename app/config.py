import os
import json
import boto3
from dotenv import load_dotenv

# üöÄ Carrega as vari√°veis de ambiente do arquivo .env (se estiver rodando localmente)
dotenv_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".env"))
load_dotenv(dotenv_path)

class Settings:
    """
    Classe centralizada para armazenar as configura√ß√µes do projeto.

    üîπ Vari√°veis carregadas do .env (desenvolvimento) ou AWS Secrets Manager (produ√ß√£o).
    üîπ Seguran√ßa refor√ßada para evitar exposi√ß√£o de credenciais.
    """

    # üîπ Configura√ß√£o da OpenAI (ChatGPT)
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    CLAID_API_KEY = os.getenv("CLAID_API_KEY")  # API para processamento de imagens

    # üîπ Configura√ß√µes do AWS S3 (Armazenamento em Nuvem)
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    AWS_REGION = os.getenv("AWS_REGION", "us-east-1")  # Padr√£o: us-east-1
    AWS_BUCKET_NAME = os.getenv("AWS_BUCKET_NAME")  # Nome do Bucket S3
    S3_ORIGINALS_FOLDER = os.getenv("S3_ORIGINALS_FOLDER", "originals")  # Pasta de uploads brutos
    S3_PROCESSED_FOLDER = os.getenv("S3_PROCESSED_FOLDER", "processed")  # Pasta de imagens processadas

    # üîπ Configura√ß√µes do Twilio (WhatsApp)
    TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
    TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
    TWILIO_WHATSAPP_NUMBER = os.getenv("TWILIO_WHATSAPP_NUMBER", "whatsapp:+14155238886")  # N√∫mero padr√£o do Twilio

    # üîπ Configura√ß√£o de Cache (Para armazenar sess√µes tempor√°rias)
    REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")  # URL do Redis para cache de sess√£o

    @classmethod
    def verificar_configuracoes(cls):
        """
        Verifica quais configura√ß√µes foram carregadas corretamente.

        üîπ Evita expor valores sens√≠veis diretamente no log.
        üîπ Ajuda a identificar configura√ß√µes ausentes.
        """
        print("\nüîπ Verifica√ß√£o das Configura√ß√µes:")
        print(f"‚úÖ OPENAI_API_KEY: {'OK' if cls.OPENAI_API_KEY else '‚ùå N√ÉO ENCONTRADA'}")
        print(f"‚úÖ TWILIO_ACCOUNT_SID: {'OK' if cls.TWILIO_ACCOUNT_SID else '‚ùå N√ÉO ENCONTRADA'}")
        print(f"‚úÖ TWILIO_AUTH_TOKEN: {'OK' if cls.TWILIO_AUTH_TOKEN else '‚ùå N√ÉO ENCONTRADA'}")
        print(f"‚úÖ TWILIO_WHATSAPP_NUMBER: {'OK' if cls.TWILIO_WHATSAPP_NUMBER else '‚ùå N√ÉO ENCONTRADO'}")
        print(f"‚úÖ AWS Configurado: {'OK' if cls.AWS_ACCESS_KEY_ID and cls.AWS_SECRET_ACCESS_KEY else '‚ùå N√ÉO ENCONTRADO'}")
        print(f"‚úÖ Redis Configurado: {'OK' if cls.REDIS_URL else '‚ùå N√ÉO CONFIGURADO'}\n")

    @classmethod
    def carregar_segredos_aws(cls, secret_name):
        """
        Carrega credenciais do AWS Secrets Manager (usado em produ√ß√£o).

        Par√¢metros:
            secret_name (str): Nome do segredo no AWS Secrets Manager.

        Retorna:
            dict: Dicion√°rio com os valores das credenciais.

        Exemplo de Uso:
            secrets = Settings.carregar_segredos_aws("meu-segredo")
            OPENAI_API_KEY = secrets["OPENAI_API_KEY"]
        """
        try:
            client = boto3.client("secretsmanager", region_name=cls.AWS_REGION)
            response = client.get_secret_value(SecretId=secret_name)
            secrets = json.loads(response["SecretString"])
            return secrets
        except Exception as e:
            print(f"‚ö† [WARNING] Erro ao carregar segredos do AWS: {e}")
            return None  # Retorna None em vez de {}

# Criar uma inst√¢ncia das configura√ß√µes
settings = Settings()

# Opcional: Executa a verifica√ß√£o ao importar o m√≥dulo
Settings.verificar_configuracoes()
